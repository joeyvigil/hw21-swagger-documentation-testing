
swagger: '2.0'
info:
  title: "Library Management API"
  description: "Used to manage the everyday functionalities of a library"
  version: "0.0.1"

host: "127.0.0.1:5000" #During development my API is served on my local host (will change when we go to prod)
schemes:
  - "https"
  - "http"
consumes:
  - "application/json" #MY api recieves json data
produces:
  - "application/json" #and produces json data

securityDefinitions: #Describing how to add token auth to the endpoints
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header


paths: #Information about our routes

  /users/login: #endpoint starts the path
    post: #request type (post,get,put,delete)
      tags:
        - Users #Adds this route to a category
      summary: "Login endpoint (generates a token)" #At a glance information about the endpoint
      description: "Validates user credentials (email and password), and produces a user specific token." #more in-depth info about the endpoint
      parameters: #info about the data being sent (DONT FORGET THE 'S' in parameters)
        - in: "body" #Where will this info come from
          name: "body"
          description: "Login Credentials" #What are you sending
          required: true 
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              message: "Welcome User"
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOj..."

  /users:
    post: #Create User Endpoint
      tags:
        - Users
      summary: "Register User"
      description: "Send in user info, to create a user profile that will be stored in the database. DOB and Address are optional fields."
      parameters:
        - in: "body"
          name: "body"
          description: "New User Information"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
          
      responses:
        201:
          description: "Creation Successful"
          schema:
            $ref: "#/definitions/UserResponse"
          examples:
            application/json:
              DOB: "1900-01-01"
              address: "123 Fun St."
              email: "test@test1.com"
              id: 0
              password: "<encrypted password>"
              role: "Admin"
              username: "test_user"
    
    get: #Get all users Endpoint
      tags:
        - Users
      summary: "Returns all users"
      description: "Endpoint to recieve an array of user objects."
      responses:
        200:
          description: "Successfully Retrieved Users"
          schema:
            $ref: "#/definitions/UsersResponse"

    put: #Update a user
      tags:
        - Users
      summary: "Update User Endpoint"
      description: "Endpoint to update a user, requires a token, user will be identified by the token"
      security:
        - bearerAuth: [] #Referencing our Token Auth definition (Make sure when authorizing in Swagger you add Bearer <Token>)
      parameters:
        - in: "body"
          name: "body"
          description: "User Updates"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
          
      responses:
        200:
          description: "Creation Successful"
          schema:
            $ref: "#/definitions/UserResponse"
          examples:
            application/json:
              DOB: "1900-01-01"
              address: "123 Fun St."
              email: "test@test1.com"
              id: 0
              password: "<encrypted password>"
              role: "Admin"
              username: "test_user"
    
    delete: #Delete a user
      tags:
        - Users
      summary: "Delete a User"
      description: "Delete a user, requires a token, token will be used to identify user to delete."
      security:
        - bearerAuth: []
      responses:
        200:
          schema:
            type: object
            properties:
              message:
                type: string


definitions: #Information about the shape of input and output json

  LoginCredentials: #Input data required for login route
    type: object
    properties:
      email:
        type: string
      password:
        type: string

    required:
      - email
      - password

  LoginResponse: #Response from /login endpoint
    type: object
    properties:
      message:
        type: string
      token:
        type: string

  UserInput: #Sending user Information
    type: object
    properties:
      DOB:
        type: string
        example: "1900-01-01"
      address:
        type: string
        example: "123 Fun St."
      email:
        type: string
        example: "test@test1.com"
      password:
        type: string
        example: "123"
      role:
        type: string
        example: "Admin"
      username:
        type: string
        example: "test_user" 

    required:
      - email
      - password
      - role
      - username

  UserResponse: #Recieve Single User Profile
    type: object
    properties:
      DOB:
        type: string
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string

  UsersResponse: #Response for multiple users
    type: array
    items:
      type: object
      properties:
        DOB:
          type: string
        address:
          type: string
        email:
          type: string
        id:
          type: integer
        password:
          type: string
        role:
          type: string
        username:
          type: string
          